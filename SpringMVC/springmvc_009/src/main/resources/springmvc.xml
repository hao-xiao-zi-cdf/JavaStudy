<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--    主键扫描-->
    <context:component-scan base-package="com.hao_xiao_zi.springmvc"/>
<!--    配置视图解析器-->
    <bean id="thymeleafViewResolver" class="org.thymeleaf.spring6.view.ThymeleafViewResolver">
        <!--作用于视图渲染的过程中，可以设置视图渲染后输出时采用的编码字符集-->
        <property name="characterEncoding" value="UTF-8"/>
        <!--如果配置多个视图解析器，它来决定优先使用哪个视图解析器，它的值越小优先级越高-->
        <property name="order" value="1"/>
        <!--当 ThymeleafViewResolver 渲染模板时，会使用该模板引擎来解析、编译和渲染模板-->
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring6.SpringTemplateEngine">
                <!--用于指定 Thymeleaf 模板引擎使用的模板解析器。模板解析器负责根据模板位置、模板资源名称、文件编码等信息，加载模板并对其进行解析-->
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver">
                        <!--设置模板文件的位置（前缀）-->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!--设置模板文件后缀（后缀），Thymeleaf文件扩展名不一定是html，也可以是其他，例如txt，大部分都是html-->
                        <property name="suffix" value=".html"/>
                        <!--设置模板类型，例如：HTML,TEXT,JAVASCRIPT,CSS等-->
                        <property name="templateMode" value="HTML"/>
                        <!--用于模板文件在读取和解析过程中采用的编码字符集-->
                        <property name="characterEncoding" value="UTF-8"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
<!--&lt;!&ndash;        配置异常映射信息&ndash;&gt;-->
<!--        <property name="exceptionMappings">-->
<!--&lt;!&ndash;            key配置发生的异常类型，value配置发生该异类型后跳转的视图逻辑名称&ndash;&gt;-->
<!--            <props>-->
<!--                <prop key="java.lang.Exception">exception</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--&lt;!&ndash;        springmvc会将value值及其当前发生的异常对象以键值对的形式存储到请求域当中，当发生异常时展示异常信息&ndash;&gt;-->
<!--        <property name="exceptionAttribute" value="e"/>-->
<!--    </bean>-->
    <mvc:annotation-driven/>
    <mvc:default-servlet-handler/>
<!--    配置拦截器-->
    <mvc:interceptors>
<!--        基本配置1-->
<!--        <bean class="com.hao_xiao_zi.springmvc.interceptor.Interceptor1"/>-->
<!--        基本配置2-->
<!--        <ref bean="interceptor1"/>-->
<!--        拦截器高级配置，有些路径拦截，有些路径不拦截-->
<!--        <mvc:interceptor>-->
<!--            拦截所有路径-->
<!--            <mvc:mapping path="/**"/>-->
<!--            该路径不拦截-->
<!--            <mvc:exclude-mapping path="/ok"/>-->
<!--            配置拦截器-->
<!--            <ref bean="interceptor1"/>-->
<!--        </mvc:interceptor>-->
<!--        多个拦截器执行顺序-->
        <ref bean="interceptor1"/>
        <ref bean="interceptor2"/>
        <ref bean="interceptor3"/>
    </mvc:interceptors>
</beans>